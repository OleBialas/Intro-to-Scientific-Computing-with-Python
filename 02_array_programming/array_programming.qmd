---
title: "Array Programming in Numpy"
engine: Jupyter
filters:
  - assign
number-sections: true
number-depth: 2
---

## Indexing and Slicing

Often, we want to access specific values stored inside an array.
This can be done by slicing and indexing.
Indexing simply means getting the element at a specific position.
Python starts counting at 0, so `x[0]` will get the **1st** element of `x`.
Slicing means getting all values within a certain range by providing a start and stop position.
When we index and slice multi-dimensional arrays, we must provide multiple coordinates - one per dimension.
We can also omit a value to indicate that we want to get **all** values along that dimension

Execute the cell below to install the packages required for this notebook.

```{python}
#| eval: false
%pip install numpy
```

| Code | Description |
| --- | --- |
| `import numpy as np` | Import the module `numpy` under the alias `np` |
| `x = np.arange(2,7)` | Create an array with all integers between 2 and (not including) 7 and assign it to the variable `x` |
| `x[0]` | Get the 1st element of `x` |
| `x[-1]` | Get the last element of `x` |
| `x[2:5]` | Get the 3rd 4th and 5th elements of `x` |
| `x[:5]` | Get everything up to and including the 5th element of `x` |
| `x[2, 1]` | Get the element in the 3rd row and 2nd column of  the 2-dimensional array `x` |
| `x[0, :]` | Get the whole first row of `x` |
| `x[1:5, 2]` | Get the values from rows 2 through 5 in the 3rd column of `x` |  

---

::: {#exr-}
Import the Numpy module under the alias `np`.
:::

:::{.sol}
```{python}
import numpy as np
```
:::

:::{.direction}
```{python}
#| echo: false
print('\u200b')
```
:::

:::{#exr-}
Create an array with the integers between 1 and 10 and assign it to a variable `x`.
:::

:::{.sol}
```{python}
x = np.arange(1, 10)
```
:::

:::{.direction}
```{python}
#| echo: false
print('\u200b')
```
:::

::: {#exr-}
Get the second element of `x`.
:::

:::{.sol}
```{python}
x[1]
```
:::

:::{.direction}
```{python}
#| echo: false
print('\u200b')
```
:::

::: {#exr-}
Get the second-to-last element of `x`.
:::

:::{.sol}
```{python}
x[-2]
```
:::

:::{.direction}
```{python}
#| echo: false
print('\u200b')
```
:::

::: {#exr-}
Get all the elements of `x` except for the first two.
:::

:::{.sol}
```{python}
x[2:]
```
:::

:::{.direction}
```{python}
#| echo: false
print('\u200b')
```
:::

::: {#exr-}
Get all elements of `x` except for the first and last.
:::

:::{.sol}
```{python}
x[1:-1]
```
:::

:::{.direction}
```{python}
#| echo: false
print('\u200b')
```
:::

::: {#exr-}
Execute the cell below to define the 2-dimensional array `x`.
:::

```{python}
x = np.array([
    [1,2,3],
    [4,5,6],
    [7,8,9]
])
```

::: {#exr-}
Get the first row of `x` with the values `[1, 2, 3]`.
:::

:::{.sol}
```{python}
x[0, :]
```
:::

:::{.direction}
```{python}
#| echo: false
print('\u200b')
```
:::

::: {#exr-}
Get the second column of `x` with the values `[2, 5, 8]`.
:::

:::{.sol}
```{python}
x[:, 1]
```
:::

:::{.direction}
```{python}
#| echo: false
print('\u200b')
```
:::

::: {#exr-}
Get every value of `x` except for the bottom row.
:::

:::{.sol}
```{python}
x[:-1, :]
```
:::

:::{.direction}
```{python}
#| echo: false
print('\u200b')
```
:::

::: {#exr-}
Get every value of `x` except for the rightmost column.
:::

:::{.sol}
```{python}
x[:, :-1]
```
:::

:::{.direction}
```{python}
#| echo: false
print('\u200b')
```
:::

## Filtering

Another way to get specific values from arrays is by filtering.
By filtering, we can extract values from an array based on a specific condition.
For example, we can get all values that are greater than 0.
Filtering can be divided into two steps: 
1. Create a mask that specifies which elements meet the condition.
2. Apply the mask to the array to filter it.
By creating different masks we can vary the criteria for selecting data from an array.

| Code | Description |
| --- | --- |
| `mask = x>1` | Create a `mask` that is `True` where `x` is greater than `1` and `False` otherwise |
| `mask = x=="k"` | Create a `mask` that is `True` where `x` is equal to `"k"` and `False` otherwise |
| `mask = x<=1` | Create a `mask` that is `True` where `x` is smaller than or equal to `1` and `False` otherwise |
| `x[mask]` | Get all elements of `x` where the `mask` is `True` |
| `np.sum(mask)` | Sum all elements of the `mask` (`True` counts as 1, `False` as 0) |
| `np.size(mask)` | Get the number of elements in `x` |
| `x = np.random.randint(5, size=20)` | Create an array with `20` random integers between 0 and `5` and assign it to the variable `x` |

---

:::{#exr-}
Create an array with 100 random integers between 0 and 10 and assign it to the variable `x`.
:::

:::{.sol}
```{python}
x = np.random.randint(10, size=100)
```
:::

:::{.direction}
```{python}
#| echo: false
print('\u200b')
```
:::

::: {#exm-}
Get all values of x that are smaller than 5.
:::

```{python}
mask = x<5
x[mask]
```

::: {#exr-}
Get all values of `x` that are greater than 3.
:::

:::{.sol}
```{python}
mask = x>3
x[mask]
```
:::

:::{.direction}
```{python}
#| echo: false
print('\u200b')
```
:::

:::{#exr-}
Get all values of `x` that are smaller than or equal to 2.
:::

:::{.sol}
```{python}
x[x<=2]
```
:::

:::{.direction}
```{python}
#| echo: false
print('\u200b')
```
:::

:::{#exr-}
Execute the cell below to define an array containing a gene sequence. Then, get all adenine (`"A"`) nucleotides from this array.
:::

```{python}
seq = np.array(["A", "T", "G", "C", "G", "T", "A", "C", "G", "T", "T", "A", "G", "C", "T", "A", "G", "G", "C", "T", "T", "A", "C", "G", "A", "T", "C", "G", "T", "A"])
```

:::{.sol}
```{python}
seq[seq=="A"]
```
:::

:::{.direction}
```{python}
#| echo: false
print('\u200b')
```
:::

:::{#exr-}
Is there more cytosine (`"C"`) or guanine (`"G"`) in the sequence?
:::

:::{.sol}
```{python}
np.sum(seq=="C") < np.sum(seq=="G")
```
:::

:::{.direction}
```{python}
#| echo: false
print('\u200b')
```
:::

:::{#exr-}
What fraction of the sequence is made up by thymine (`"T"`)?
:::

:::{.sol}
```{python}
print(np.sum(seq=="T")/np.size(seq))
```
:::

:::{.direction}
```{python}
#| echo: false
print('\u200b')
```
:::

## Analyzing Multi-Dimensional Data

Now that we learned about indexing, slicing and filtering, we have the tools for analyzing multidimensional data!
In this section we are going to analyze electroencephalography (EEG) recordings of brain responses to pure tones.
The data are stored in a 3-dimensional array, where the dimensions represent:
1. The number of trials or epochs (i.e. repetitions of the same stimulus)
2. The number of EEG channels
3. The number of time points in the recording
When we use Numpy functions to compute properties like mean or standard deviation on a multidimensional array, we can use the `axis` argument to select a specific dimension.

|Code | Description |
| --- | --- |
| `x=np.load("myfile.npy")` | Load the data stored in `"myfile.npy"` and assign them to the variable `x` |
| `np.save("newfile.npy", x)` | Save the array `x` to a file called `"newfile.npy"` |
| `np.shape(x)` | Get the shape of `x` (i.e. the size of all dimensions of `x`) |
| `x[0, :, :]` | Select the 1st element along the 1st dimension of the 3D array `x` |
| `x[:, 4:10, :]` | Select the elements 5 to 10 along the 2nd dimension of the 3D array `x` |
| `x[1, :, :3]` | Select the 1st element along the 1st dimension and the first 3 elements along the 3rd dimension of the 3D array `x` |
| `np.mean(x, axis=0)` | Compute the mean across the 1st dimension of `x`|
| `np.std(x, axis=2)` | Compute the standard deviation across the 3rd dimension of `x`|
| `np.max(x)` | Get the maximum value of `x`|

---

:::{#exr-}
Load the data stored in the file `eeg_epochs.npy` and assign it to a variable called `eeg`.
:::

:::{.sol}
```{python}
eeg = np.load("eeg_epochs.npy")
```
:::

:::{.direction}
```{python}
#| echo: false
print('\u200b')
```
:::

:::{#exr-}
How many epochs, channels and time points are there in the `eeg` data?
:::

:::{.sol}
```{python}
print(f"There are {eeg.shape[0]} epochs, {eeg.shape[1]} channels and {eeg.shape[2]} time points.")
```
:::

:::{.direction}
```{python}
#| echo: false
print('\u200b')
```
:::

:::{#exr-}
Select the data from the first EEG channel (Tip: channels are represented in the 2nd dimension of the `eeg` array).
:::

:::{.sol}
```{python}
eeg[:, 0, :]
```
:::

:::{.direction}
```{python}
#| echo: false
print('\u200b')
```
:::

:::{#exr-}
Select the data from the first 10 epochs for the 5th EEG channel.
:::

:::{.sol}
```{python}
eeg[:10, 4, :]
```
:::

:::{.direction}
```{python}
#| echo: false
print('\u200b')
```
:::

:::{#exr-}
Select the data from the first half of all time points for EEG channels 10 to 20.
:::

:::{.sol}
```{python}
n_time = int(np.shape(eeg)[0]/2)  # unnecessary
eeg[:, 9:20,  :n_time]
```
:::

:::{.direction}
```{python}
#| echo: false
print('\u200b')
```
:::

:::{#exr-}
Compute the standard deviation across all EEG channels which is called the global field potential (GFP) and assign it to a new variable called `gfp`. What is the shape of this array?
:::

:::{.sol}
```{python}
gfp = np.std(eeg, axis=1)
gfp.shape
```
:::

:::{.direction}
```{python}
#| echo: false
print('\u200b')
```
:::

:::{#exr-}
Save the GFP to a file called `"gfp.npy"`. Then load the file again to make sure it was stored.
:::

:::{.sol}
```{python}
np.save("gfp.npy", gfp)
np.load("gfp.npy")
```
:::

:::{.direction}
```{python}
#| echo: false
print('\u200b')
```
:::

:::{#exr-avggfp}
Average the GFP across all epochs and find the peak value of this average GFP.
:::

:::{.sol}
```{python}
avg_gfp = np.mean(gfp, axis=0)
np.max(avg_gfp)
```
:::

:::{.direction}
```{python}
#| echo: false
print('\u200b')
```
:::

:::{#exr-}
Average the GFP across time and epochs (so that the result is a single scalar value).
Compute this value separately for the first and second half of epochs - which one is larger?
:::

:::{.sol}
```{python}
n_epo_half = int(np.shape(gfp)[0]/2) # unnecessary
print(np.mean(gfp[0:n_epo_half]) < np.mean(gfp[n_epo_half:]))
```
:::

:::{.direction}
```{python}
#| echo: false
print('\u200b')
```
:::

## Linking Arrays with Filtering

Filtering can also be used to link different arrays. In this section we are going to load an array that contains the time points for the epochs from the previous array. We can use that array to define a mask and then apply that mask to the array of epoch. 
Numpy also allows us to combine multiple masks using the and/or operators `&` and `|`.
Combining two Boolean arrays with `&` results in an array that is only `True` when both arrays are `True`.
Combining them with `|` results in an array that is `True` when either array is `True`.
In this section we are going to use filtering to link the EEG data with the array containing the time points at which the data were recorded (time point 0 represents the stimulus onset).

:::{#exr-}
Load the data stored in the file `epoch_times.npy` and assign it to a variable called `times`.
:::

:::{.sol}
```{python}
times = np.load("epoch_times.npy")
```
:::

:::{.direction}
```{python}
#| echo: false
print('\u200b')
```
:::

:::{#exr-}
How many time points are there? What's the start and stop time?
:::

:::{.sol}
```{python}
print(np.size(times), times[0], times[-1])
```
:::

:::{.direction}
```{python}
#| echo: false
print('\u200b')
```
:::


:::{#exm-}
Get all of the `eeg` data that was recorded in the first 0.2 seconds after stimulus onset and print the shape of the resulting array.
:::

```{python}
mask = times < 0.2
np.shape(eeg[:,:,mask])
```


:::{#exr-}
Get all of the `eeg` data that was recorded in the first 0.05 seconds after stimulus onset and print the shape of the resulting array.
:::

:::{.sol}
```{python}
mask = times < 0.05
np.shape(eeg[:,:,mask])
```
:::

:::{.direction}
```{python}
#| echo: false
print('\u200b')
```
:::

:::{#exm-}
Get all of the `eeg` data that was recorded between 0.1 and 0.2 seconds after stimulus onset and print the shape of the resulting array.
:::

```{python}
mask = (times>=0.1) & (times<=0.2)
np.shape(eeg[:,:,mask])
```

:::{#exr-}
Get all of the `eeg` data that was recorded before 0.1 and after 0.2 seconds and print the shape of the resulting array.
:::

:::{.sol}
```{python}
mask = (times>=0.1) | (times<=0.2)
eeg[:,:,mask]
```
:::

:::{.direction}
```{python}
#| echo: false
print('\u200b')
```
:::

:::{#exr-}
Take the average GFP from @exr-avggfp, get the values between 0.085 and 0.115 seconds after stimulus onset and average them. This is the amplitude of the so called N1 response.
:::

:::{.sol}
```{python}
mask = (times>=0.085) & (times<=0.015)
avg_gfp[mask].mean()
```
:::

:::{.direction}
```{python}
#| echo: false
print('\u200b')
```
:::

:::{#exr-}
What is the time point where the average GFP is the largest?
:::

:::{.sol}
```{python}
mask = avg_gfp == avg_gfp.max()
times[mask]
```
:::

:::{.direction}
```{python}
#| echo: false
print('\u200b')
```
:::


